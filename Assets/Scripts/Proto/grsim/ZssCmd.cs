// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: zss_cmd.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ZSS.New {

  /// <summary>Holder for reflection information generated from zss_cmd.proto</summary>
  public static partial class ZssCmdReflection {

    #region Descriptor
    /// <summary>File descriptor for zss_cmd.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ZssCmdReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg16c3NfY21kLnByb3RvEgdaU1MuTmV3GhJ6c3NfY21kX3R5cGUucHJvdG8i",
            "PQoNUm9ib3RzX1N0YXR1cxIsCg1yb2JvdHNfc3RhdHVzGAEgAygLMhUuWlNT",
            "Lk5ldy5Sb2JvdF9TdGF0dXMigQEKEE11bHRpY2FzZV9TdGF0dXMSCgoCaXAY",
            "ASABKAkSDAoEdXVpZBgCIAEoCRIbCgR0ZWFtGAMgASgOMg0uWlNTLk5ldy5U",
            "ZWFtEhAKCHJvYm90X2lkGAQgASgFEg8KB2JhdHRlcnkYBSABKAISEwoLY2Fw",
            "YWNpdGFuY2UYBiABKAIi4gEKDFJvYm90X1N0YXR1cxIQCghyb2JvdF9pZBgB",
            "IAEoBRIQCghpbmZyYXJlZBgCIAEoAhIRCglmbGF0X2tpY2sYAyABKAISEQoJ",
            "Y2hpcF9raWNrGAQgASgCEhEKCWltdV90aGV0YRgFIAEoAhIPCgdiYXR0ZXJ5",
            "GAYgASgCEhMKC2NhcGFjaXRhbmNlGAcgASgCEhsKBG9kb20YCCABKAsyDS5a",
            "U1MuTmV3Lk9kb20SFQoNd2hlZWxfZW5jb2RlchgJIAMoAhIbCgR0ZWFtGAog",
            "ASgOMg0uWlNTLk5ldy5UZWFtIlcKDlJvYm90c19Db21tYW5kEicKB2NvbW1h",
            "bmQYASADKAsyFi5aU1MuTmV3LlJvYm90X0NvbW1hbmQSEgoFZGVsYXkYAiAB",
            "KAVIAIgBAUIICgZfZGVsYXki5QQKDVJvYm90X0NvbW1hbmQSEAoIcm9ib3Rf",
            "aWQYASABKAUSMgoJa2lja19tb2RlGAIgASgOMh8uWlNTLk5ldy5Sb2JvdF9D",
            "b21tYW5kLktpY2tNb2RlEhQKDGRlc2lyZV9wb3dlchgDIAEoAhIbChNraWNr",
            "X2Rpc2NoYXJnZV90aW1lGAQgASgCEhQKDGRyaWJibGVfc3BpbhgFIAEoAhIT",
            "CgtuZWVkX3JlcG9ydBgGIAEoCBIwCghjbWRfdHlwZRgHIAEoDjIeLlpTUy5O",
            "ZXcuUm9ib3RfQ29tbWFuZC5DbWRUeXBlEiAKB2NtZF92ZWwYCCABKAsyDy5a",
            "U1MuTmV3LkNtZFZlbBIiCghjbWRfcG9zZRgJIAEoCzIQLlpTUy5OZXcuQ21k",
            "UG9zZRIkCgljbWRfY2hhc2UYCiABKAsyES5aU1MuTmV3LkNtZENoYXNlEiQK",
            "CWNtZF93aGVlbBgLIAEoCzIRLlpTUy5OZXcuQ21kV2hlZWwSMgoJY29tbV90",
            "eXBlGAwgASgOMh8uWlNTLk5ldy5Sb2JvdF9Db21tYW5kLkNvbW1UeXBlIigK",
            "CEtpY2tNb2RlEggKBE5PTkUQABIICgRLSUNLEAESCAoEQ0hJUBACIkwKB0Nt",
            "ZFR5cGUSCAoEU1RPUBAAEg0KCUNNRF9XSEVFTBABEgsKB0NNRF9WRUwQAhIM",
            "CghDTURfUE9TRRADEg0KCUNNRF9DSEFTRRAEIkAKCENvbW1UeXBlEgsKB0RF",
            "RkFVTFQQABIKCgZTRVJJQUwQARINCglVRFBfMjRMMDEQAhIMCghVRFBfV0lG",
            "SRADKikKBFRlYW0SCwoHVU5LTk9XThAAEggKBEJMVUUQARIKCgZZRUxMT1cQ",
            "AmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::ZSS.New.ZssCmdTypeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::ZSS.New.Team), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ZSS.New.Robots_Status), global::ZSS.New.Robots_Status.Parser, new[]{ "RobotsStatus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZSS.New.Multicase_Status), global::ZSS.New.Multicase_Status.Parser, new[]{ "Ip", "Uuid", "Team", "RobotId", "Battery", "Capacitance" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZSS.New.Robot_Status), global::ZSS.New.Robot_Status.Parser, new[]{ "RobotId", "Infrared", "FlatKick", "ChipKick", "ImuTheta", "Battery", "Capacitance", "Odom", "WheelEncoder", "Team" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZSS.New.Robots_Command), global::ZSS.New.Robots_Command.Parser, new[]{ "Command", "Delay" }, new[]{ "Delay" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ZSS.New.Robot_Command), global::ZSS.New.Robot_Command.Parser, new[]{ "RobotId", "KickMode", "DesirePower", "KickDischargeTime", "DribbleSpin", "NeedReport", "CmdType", "CmdVel", "CmdPose", "CmdChase", "CmdWheel", "CommType" }, null, new[]{ typeof(global::ZSS.New.Robot_Command.Types.KickMode), typeof(global::ZSS.New.Robot_Command.Types.CmdType), typeof(global::ZSS.New.Robot_Command.Types.CommType) }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Team {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("BLUE")] Blue = 1,
    [pbr::OriginalName("YELLOW")] Yellow = 2,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Robots_Status : pb::IMessage<Robots_Status>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Robots_Status> _parser = new pb::MessageParser<Robots_Status>(() => new Robots_Status());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Robots_Status> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZSS.New.ZssCmdReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Robots_Status() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Robots_Status(Robots_Status other) : this() {
      robotsStatus_ = other.robotsStatus_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Robots_Status Clone() {
      return new Robots_Status(this);
    }

    /// <summary>Field number for the "robots_status" field.</summary>
    public const int RobotsStatusFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ZSS.New.Robot_Status> _repeated_robotsStatus_codec
        = pb::FieldCodec.ForMessage(10, global::ZSS.New.Robot_Status.Parser);
    private readonly pbc::RepeatedField<global::ZSS.New.Robot_Status> robotsStatus_ = new pbc::RepeatedField<global::ZSS.New.Robot_Status>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::ZSS.New.Robot_Status> RobotsStatus {
      get { return robotsStatus_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Robots_Status);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Robots_Status other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!robotsStatus_.Equals(other.robotsStatus_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= robotsStatus_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      robotsStatus_.WriteTo(output, _repeated_robotsStatus_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      robotsStatus_.WriteTo(ref output, _repeated_robotsStatus_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += robotsStatus_.CalculateSize(_repeated_robotsStatus_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Robots_Status other) {
      if (other == null) {
        return;
      }
      robotsStatus_.Add(other.robotsStatus_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            robotsStatus_.AddEntriesFrom(input, _repeated_robotsStatus_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            robotsStatus_.AddEntriesFrom(ref input, _repeated_robotsStatus_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// use to multicast in LAN
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Multicase_Status : pb::IMessage<Multicase_Status>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Multicase_Status> _parser = new pb::MessageParser<Multicase_Status>(() => new Multicase_Status());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Multicase_Status> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZSS.New.ZssCmdReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Multicase_Status() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Multicase_Status(Multicase_Status other) : this() {
      ip_ = other.ip_;
      uuid_ = other.uuid_;
      team_ = other.team_;
      robotId_ = other.robotId_;
      battery_ = other.battery_;
      capacitance_ = other.capacitance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Multicase_Status Clone() {
      return new Multicase_Status(this);
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 1;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private string uuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 3;
    private global::ZSS.New.Team team_ = global::ZSS.New.Team.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::ZSS.New.Team Team {
      get { return team_; }
      set {
        team_ = value;
      }
    }

    /// <summary>Field number for the "robot_id" field.</summary>
    public const int RobotIdFieldNumber = 4;
    private int robotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RobotId {
      get { return robotId_; }
      set {
        robotId_ = value;
      }
    }

    /// <summary>Field number for the "battery" field.</summary>
    public const int BatteryFieldNumber = 5;
    private float battery_;
    /// <summary>
    /// battery voltage
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Battery {
      get { return battery_; }
      set {
        battery_ = value;
      }
    }

    /// <summary>Field number for the "capacitance" field.</summary>
    public const int CapacitanceFieldNumber = 6;
    private float capacitance_;
    /// <summary>
    /// capacitance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Capacitance {
      get { return capacitance_; }
      set {
        capacitance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Multicase_Status);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Multicase_Status other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ip != other.Ip) return false;
      if (Uuid != other.Uuid) return false;
      if (Team != other.Team) return false;
      if (RobotId != other.RobotId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Battery, other.Battery)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Capacitance, other.Capacitance)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (Team != global::ZSS.New.Team.Unknown) hash ^= Team.GetHashCode();
      if (RobotId != 0) hash ^= RobotId.GetHashCode();
      if (Battery != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Battery);
      if (Capacitance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Capacitance);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Ip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ip);
      }
      if (Uuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uuid);
      }
      if (Team != global::ZSS.New.Team.Unknown) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Team);
      }
      if (RobotId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RobotId);
      }
      if (Battery != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Battery);
      }
      if (Capacitance != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Capacitance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Ip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ip);
      }
      if (Uuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uuid);
      }
      if (Team != global::ZSS.New.Team.Unknown) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Team);
      }
      if (RobotId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RobotId);
      }
      if (Battery != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Battery);
      }
      if (Capacitance != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Capacitance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (Team != global::ZSS.New.Team.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Team);
      }
      if (RobotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RobotId);
      }
      if (Battery != 0F) {
        size += 1 + 4;
      }
      if (Capacitance != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Multicase_Status other) {
      if (other == null) {
        return;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.Team != global::ZSS.New.Team.Unknown) {
        Team = other.Team;
      }
      if (other.RobotId != 0) {
        RobotId = other.RobotId;
      }
      if (other.Battery != 0F) {
        Battery = other.Battery;
      }
      if (other.Capacitance != 0F) {
        Capacitance = other.Capacitance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Ip = input.ReadString();
            break;
          }
          case 18: {
            Uuid = input.ReadString();
            break;
          }
          case 24: {
            Team = (global::ZSS.New.Team) input.ReadEnum();
            break;
          }
          case 32: {
            RobotId = input.ReadInt32();
            break;
          }
          case 45: {
            Battery = input.ReadFloat();
            break;
          }
          case 53: {
            Capacitance = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Ip = input.ReadString();
            break;
          }
          case 18: {
            Uuid = input.ReadString();
            break;
          }
          case 24: {
            Team = (global::ZSS.New.Team) input.ReadEnum();
            break;
          }
          case 32: {
            RobotId = input.ReadInt32();
            break;
          }
          case 45: {
            Battery = input.ReadFloat();
            break;
          }
          case 53: {
            Capacitance = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Robot_Status : pb::IMessage<Robot_Status>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Robot_Status> _parser = new pb::MessageParser<Robot_Status>(() => new Robot_Status());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Robot_Status> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZSS.New.ZssCmdReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Robot_Status() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Robot_Status(Robot_Status other) : this() {
      robotId_ = other.robotId_;
      infrared_ = other.infrared_;
      flatKick_ = other.flatKick_;
      chipKick_ = other.chipKick_;
      imuTheta_ = other.imuTheta_;
      battery_ = other.battery_;
      capacitance_ = other.capacitance_;
      odom_ = other.odom_ != null ? other.odom_.Clone() : null;
      wheelEncoder_ = other.wheelEncoder_.Clone();
      team_ = other.team_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Robot_Status Clone() {
      return new Robot_Status(this);
    }

    /// <summary>Field number for the "robot_id" field.</summary>
    public const int RobotIdFieldNumber = 1;
    private int robotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RobotId {
      get { return robotId_; }
      set {
        robotId_ = value;
      }
    }

    /// <summary>Field number for the "infrared" field.</summary>
    public const int InfraredFieldNumber = 2;
    private float infrared_;
    /// <summary>
    /// infrared sensor with elasped time , positive means infrared is detected
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Infrared {
      get { return infrared_; }
      set {
        infrared_ = value;
      }
    }

    /// <summary>Field number for the "flat_kick" field.</summary>
    public const int FlatKickFieldNumber = 3;
    private float flatKick_;
    /// <summary>
    /// elasped time since last kick
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FlatKick {
      get { return flatKick_; }
      set {
        flatKick_ = value;
      }
    }

    /// <summary>Field number for the "chip_kick" field.</summary>
    public const int ChipKickFieldNumber = 4;
    private float chipKick_;
    /// <summary>
    /// elasped time since last chip
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ChipKick {
      get { return chipKick_; }
      set {
        chipKick_ = value;
      }
    }

    /// <summary>Field number for the "imu_theta" field.</summary>
    public const int ImuThetaFieldNumber = 5;
    private float imuTheta_;
    /// <summary>
    /// imu angle
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ImuTheta {
      get { return imuTheta_; }
      set {
        imuTheta_ = value;
      }
    }

    /// <summary>Field number for the "battery" field.</summary>
    public const int BatteryFieldNumber = 6;
    private float battery_;
    /// <summary>
    /// battery voltage
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Battery {
      get { return battery_; }
      set {
        battery_ = value;
      }
    }

    /// <summary>Field number for the "capacitance" field.</summary>
    public const int CapacitanceFieldNumber = 7;
    private float capacitance_;
    /// <summary>
    /// capacitance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Capacitance {
      get { return capacitance_; }
      set {
        capacitance_ = value;
      }
    }

    /// <summary>Field number for the "odom" field.</summary>
    public const int OdomFieldNumber = 8;
    private global::ZSS.New.Odom odom_;
    /// <summary>
    /// odom of imu
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::ZSS.New.Odom Odom {
      get { return odom_; }
      set {
        odom_ = value;
      }
    }

    /// <summary>Field number for the "wheel_encoder" field.</summary>
    public const int WheelEncoderFieldNumber = 9;
    private static readonly pb::FieldCodec<float> _repeated_wheelEncoder_codec
        = pb::FieldCodec.ForFloat(74);
    private readonly pbc::RepeatedField<float> wheelEncoder_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// wheel encoder value
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> WheelEncoder {
      get { return wheelEncoder_; }
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 10;
    private global::ZSS.New.Team team_ = global::ZSS.New.Team.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::ZSS.New.Team Team {
      get { return team_; }
      set {
        team_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Robot_Status);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Robot_Status other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RobotId != other.RobotId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Infrared, other.Infrared)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FlatKick, other.FlatKick)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChipKick, other.ChipKick)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ImuTheta, other.ImuTheta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Battery, other.Battery)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Capacitance, other.Capacitance)) return false;
      if (!object.Equals(Odom, other.Odom)) return false;
      if(!wheelEncoder_.Equals(other.wheelEncoder_)) return false;
      if (Team != other.Team) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (RobotId != 0) hash ^= RobotId.GetHashCode();
      if (Infrared != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Infrared);
      if (FlatKick != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FlatKick);
      if (ChipKick != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChipKick);
      if (ImuTheta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ImuTheta);
      if (Battery != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Battery);
      if (Capacitance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Capacitance);
      if (odom_ != null) hash ^= Odom.GetHashCode();
      hash ^= wheelEncoder_.GetHashCode();
      if (Team != global::ZSS.New.Team.Unknown) hash ^= Team.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RobotId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RobotId);
      }
      if (Infrared != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Infrared);
      }
      if (FlatKick != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(FlatKick);
      }
      if (ChipKick != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(ChipKick);
      }
      if (ImuTheta != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(ImuTheta);
      }
      if (Battery != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Battery);
      }
      if (Capacitance != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Capacitance);
      }
      if (odom_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Odom);
      }
      wheelEncoder_.WriteTo(output, _repeated_wheelEncoder_codec);
      if (Team != global::ZSS.New.Team.Unknown) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Team);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RobotId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RobotId);
      }
      if (Infrared != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Infrared);
      }
      if (FlatKick != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(FlatKick);
      }
      if (ChipKick != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(ChipKick);
      }
      if (ImuTheta != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(ImuTheta);
      }
      if (Battery != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Battery);
      }
      if (Capacitance != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Capacitance);
      }
      if (odom_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Odom);
      }
      wheelEncoder_.WriteTo(ref output, _repeated_wheelEncoder_codec);
      if (Team != global::ZSS.New.Team.Unknown) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Team);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (RobotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RobotId);
      }
      if (Infrared != 0F) {
        size += 1 + 4;
      }
      if (FlatKick != 0F) {
        size += 1 + 4;
      }
      if (ChipKick != 0F) {
        size += 1 + 4;
      }
      if (ImuTheta != 0F) {
        size += 1 + 4;
      }
      if (Battery != 0F) {
        size += 1 + 4;
      }
      if (Capacitance != 0F) {
        size += 1 + 4;
      }
      if (odom_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Odom);
      }
      size += wheelEncoder_.CalculateSize(_repeated_wheelEncoder_codec);
      if (Team != global::ZSS.New.Team.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Team);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Robot_Status other) {
      if (other == null) {
        return;
      }
      if (other.RobotId != 0) {
        RobotId = other.RobotId;
      }
      if (other.Infrared != 0F) {
        Infrared = other.Infrared;
      }
      if (other.FlatKick != 0F) {
        FlatKick = other.FlatKick;
      }
      if (other.ChipKick != 0F) {
        ChipKick = other.ChipKick;
      }
      if (other.ImuTheta != 0F) {
        ImuTheta = other.ImuTheta;
      }
      if (other.Battery != 0F) {
        Battery = other.Battery;
      }
      if (other.Capacitance != 0F) {
        Capacitance = other.Capacitance;
      }
      if (other.odom_ != null) {
        if (odom_ == null) {
          Odom = new global::ZSS.New.Odom();
        }
        Odom.MergeFrom(other.Odom);
      }
      wheelEncoder_.Add(other.wheelEncoder_);
      if (other.Team != global::ZSS.New.Team.Unknown) {
        Team = other.Team;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RobotId = input.ReadInt32();
            break;
          }
          case 21: {
            Infrared = input.ReadFloat();
            break;
          }
          case 29: {
            FlatKick = input.ReadFloat();
            break;
          }
          case 37: {
            ChipKick = input.ReadFloat();
            break;
          }
          case 45: {
            ImuTheta = input.ReadFloat();
            break;
          }
          case 53: {
            Battery = input.ReadFloat();
            break;
          }
          case 61: {
            Capacitance = input.ReadFloat();
            break;
          }
          case 66: {
            if (odom_ == null) {
              Odom = new global::ZSS.New.Odom();
            }
            input.ReadMessage(Odom);
            break;
          }
          case 74:
          case 77: {
            wheelEncoder_.AddEntriesFrom(input, _repeated_wheelEncoder_codec);
            break;
          }
          case 80: {
            Team = (global::ZSS.New.Team) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RobotId = input.ReadInt32();
            break;
          }
          case 21: {
            Infrared = input.ReadFloat();
            break;
          }
          case 29: {
            FlatKick = input.ReadFloat();
            break;
          }
          case 37: {
            ChipKick = input.ReadFloat();
            break;
          }
          case 45: {
            ImuTheta = input.ReadFloat();
            break;
          }
          case 53: {
            Battery = input.ReadFloat();
            break;
          }
          case 61: {
            Capacitance = input.ReadFloat();
            break;
          }
          case 66: {
            if (odom_ == null) {
              Odom = new global::ZSS.New.Odom();
            }
            input.ReadMessage(Odom);
            break;
          }
          case 74:
          case 77: {
            wheelEncoder_.AddEntriesFrom(ref input, _repeated_wheelEncoder_codec);
            break;
          }
          case 80: {
            Team = (global::ZSS.New.Team) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Robots_Command : pb::IMessage<Robots_Command>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Robots_Command> _parser = new pb::MessageParser<Robots_Command>(() => new Robots_Command());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Robots_Command> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZSS.New.ZssCmdReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Robots_Command() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Robots_Command(Robots_Command other) : this() {
      _hasBits0 = other._hasBits0;
      command_ = other.command_.Clone();
      delay_ = other.delay_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Robots_Command Clone() {
      return new Robots_Command(this);
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 1;
    private static readonly pb::FieldCodec<global::ZSS.New.Robot_Command> _repeated_command_codec
        = pb::FieldCodec.ForMessage(10, global::ZSS.New.Robot_Command.Parser);
    private readonly pbc::RepeatedField<global::ZSS.New.Robot_Command> command_ = new pbc::RepeatedField<global::ZSS.New.Robot_Command>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::ZSS.New.Robot_Command> Command {
      get { return command_; }
    }

    /// <summary>Field number for the "delay" field.</summary>
    public const int DelayFieldNumber = 2;
    private readonly static int DelayDefaultValue = 0;

    private int delay_;
    /// <summary>
    /// delay * 0.1ms
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Delay {
      get { if ((_hasBits0 & 1) != 0) { return delay_; } else { return DelayDefaultValue; } }
      set {
        _hasBits0 |= 1;
        delay_ = value;
      }
    }
    /// <summary>Gets whether the "delay" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDelay {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "delay" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDelay() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Robots_Command);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Robots_Command other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!command_.Equals(other.command_)) return false;
      if (Delay != other.Delay) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= command_.GetHashCode();
      if (HasDelay) hash ^= Delay.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      command_.WriteTo(output, _repeated_command_codec);
      if (HasDelay) {
        output.WriteRawTag(16);
        output.WriteInt32(Delay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      command_.WriteTo(ref output, _repeated_command_codec);
      if (HasDelay) {
        output.WriteRawTag(16);
        output.WriteInt32(Delay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += command_.CalculateSize(_repeated_command_codec);
      if (HasDelay) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Delay);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Robots_Command other) {
      if (other == null) {
        return;
      }
      command_.Add(other.command_);
      if (other.HasDelay) {
        Delay = other.Delay;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            command_.AddEntriesFrom(input, _repeated_command_codec);
            break;
          }
          case 16: {
            Delay = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            command_.AddEntriesFrom(ref input, _repeated_command_codec);
            break;
          }
          case 16: {
            Delay = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Robot_Command : pb::IMessage<Robot_Command>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Robot_Command> _parser = new pb::MessageParser<Robot_Command>(() => new Robot_Command());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Robot_Command> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ZSS.New.ZssCmdReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Robot_Command() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Robot_Command(Robot_Command other) : this() {
      robotId_ = other.robotId_;
      kickMode_ = other.kickMode_;
      desirePower_ = other.desirePower_;
      kickDischargeTime_ = other.kickDischargeTime_;
      dribbleSpin_ = other.dribbleSpin_;
      needReport_ = other.needReport_;
      cmdType_ = other.cmdType_;
      cmdVel_ = other.cmdVel_ != null ? other.cmdVel_.Clone() : null;
      cmdPose_ = other.cmdPose_ != null ? other.cmdPose_.Clone() : null;
      cmdChase_ = other.cmdChase_ != null ? other.cmdChase_.Clone() : null;
      cmdWheel_ = other.cmdWheel_ != null ? other.cmdWheel_.Clone() : null;
      commType_ = other.commType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Robot_Command Clone() {
      return new Robot_Command(this);
    }

    /// <summary>Field number for the "robot_id" field.</summary>
    public const int RobotIdFieldNumber = 1;
    private int robotId_;
    /// <summary>
    /// The unique ID of the robot, as identified by SSL-Vision.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RobotId {
      get { return robotId_; }
      set {
        robotId_ = value;
      }
    }

    /// <summary>Field number for the "kick_mode" field.</summary>
    public const int KickModeFieldNumber = 2;
    private global::ZSS.New.Robot_Command.Types.KickMode kickMode_ = global::ZSS.New.Robot_Command.Types.KickMode.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::ZSS.New.Robot_Command.Types.KickMode KickMode {
      get { return kickMode_; }
      set {
        kickMode_ = value;
      }
    }

    /// <summary>Field number for the "desire_power" field.</summary>
    public const int DesirePowerFieldNumber = 3;
    private float desirePower_;
    /// <summary>
    /// use for sim / just store for debug
    /// if kick_mode == KICK, power means kick speed m/s
    /// if kick_mode == CHIP, power means chip distance m
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DesirePower {
      get { return desirePower_; }
      set {
        desirePower_ = value;
      }
    }

    /// <summary>Field number for the "kick_discharge_time" field.</summary>
    public const int KickDischargeTimeFieldNumber = 4;
    private float kickDischargeTime_;
    /// <summary>
    /// use for real robot
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float KickDischargeTime {
      get { return kickDischargeTime_; }
      set {
        kickDischargeTime_ = value;
      }
    }

    /// <summary>Field number for the "dribble_spin" field.</summary>
    public const int DribbleSpinFieldNumber = 5;
    private float dribbleSpin_;
    /// <summary>
    /// dribble PWM -1 ~ 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float DribbleSpin {
      get { return dribbleSpin_; }
      set {
        dribbleSpin_ = value;
      }
    }

    /// <summary>Field number for the "need_report" field.</summary>
    public const int NeedReportFieldNumber = 6;
    private bool needReport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool NeedReport {
      get { return needReport_; }
      set {
        needReport_ = value;
      }
    }

    /// <summary>Field number for the "cmd_type" field.</summary>
    public const int CmdTypeFieldNumber = 7;
    private global::ZSS.New.Robot_Command.Types.CmdType cmdType_ = global::ZSS.New.Robot_Command.Types.CmdType.Stop;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::ZSS.New.Robot_Command.Types.CmdType CmdType {
      get { return cmdType_; }
      set {
        cmdType_ = value;
      }
    }

    /// <summary>Field number for the "cmd_vel" field.</summary>
    public const int CmdVelFieldNumber = 8;
    private global::ZSS.New.CmdVel cmdVel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::ZSS.New.CmdVel CmdVel {
      get { return cmdVel_; }
      set {
        cmdVel_ = value;
      }
    }

    /// <summary>Field number for the "cmd_pose" field.</summary>
    public const int CmdPoseFieldNumber = 9;
    private global::ZSS.New.CmdPose cmdPose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::ZSS.New.CmdPose CmdPose {
      get { return cmdPose_; }
      set {
        cmdPose_ = value;
      }
    }

    /// <summary>Field number for the "cmd_chase" field.</summary>
    public const int CmdChaseFieldNumber = 10;
    private global::ZSS.New.CmdChase cmdChase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::ZSS.New.CmdChase CmdChase {
      get { return cmdChase_; }
      set {
        cmdChase_ = value;
      }
    }

    /// <summary>Field number for the "cmd_wheel" field.</summary>
    public const int CmdWheelFieldNumber = 11;
    private global::ZSS.New.CmdWheel cmdWheel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::ZSS.New.CmdWheel CmdWheel {
      get { return cmdWheel_; }
      set {
        cmdWheel_ = value;
      }
    }

    /// <summary>Field number for the "comm_type" field.</summary>
    public const int CommTypeFieldNumber = 12;
    private global::ZSS.New.Robot_Command.Types.CommType commType_ = global::ZSS.New.Robot_Command.Types.CommType.Default;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::ZSS.New.Robot_Command.Types.CommType CommType {
      get { return commType_; }
      set {
        commType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Robot_Command);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Robot_Command other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RobotId != other.RobotId) return false;
      if (KickMode != other.KickMode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DesirePower, other.DesirePower)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(KickDischargeTime, other.KickDischargeTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DribbleSpin, other.DribbleSpin)) return false;
      if (NeedReport != other.NeedReport) return false;
      if (CmdType != other.CmdType) return false;
      if (!object.Equals(CmdVel, other.CmdVel)) return false;
      if (!object.Equals(CmdPose, other.CmdPose)) return false;
      if (!object.Equals(CmdChase, other.CmdChase)) return false;
      if (!object.Equals(CmdWheel, other.CmdWheel)) return false;
      if (CommType != other.CommType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (RobotId != 0) hash ^= RobotId.GetHashCode();
      if (KickMode != global::ZSS.New.Robot_Command.Types.KickMode.None) hash ^= KickMode.GetHashCode();
      if (DesirePower != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DesirePower);
      if (KickDischargeTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(KickDischargeTime);
      if (DribbleSpin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DribbleSpin);
      if (NeedReport != false) hash ^= NeedReport.GetHashCode();
      if (CmdType != global::ZSS.New.Robot_Command.Types.CmdType.Stop) hash ^= CmdType.GetHashCode();
      if (cmdVel_ != null) hash ^= CmdVel.GetHashCode();
      if (cmdPose_ != null) hash ^= CmdPose.GetHashCode();
      if (cmdChase_ != null) hash ^= CmdChase.GetHashCode();
      if (cmdWheel_ != null) hash ^= CmdWheel.GetHashCode();
      if (CommType != global::ZSS.New.Robot_Command.Types.CommType.Default) hash ^= CommType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RobotId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RobotId);
      }
      if (KickMode != global::ZSS.New.Robot_Command.Types.KickMode.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) KickMode);
      }
      if (DesirePower != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(DesirePower);
      }
      if (KickDischargeTime != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(KickDischargeTime);
      }
      if (DribbleSpin != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(DribbleSpin);
      }
      if (NeedReport != false) {
        output.WriteRawTag(48);
        output.WriteBool(NeedReport);
      }
      if (CmdType != global::ZSS.New.Robot_Command.Types.CmdType.Stop) {
        output.WriteRawTag(56);
        output.WriteEnum((int) CmdType);
      }
      if (cmdVel_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CmdVel);
      }
      if (cmdPose_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(CmdPose);
      }
      if (cmdChase_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(CmdChase);
      }
      if (cmdWheel_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(CmdWheel);
      }
      if (CommType != global::ZSS.New.Robot_Command.Types.CommType.Default) {
        output.WriteRawTag(96);
        output.WriteEnum((int) CommType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RobotId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RobotId);
      }
      if (KickMode != global::ZSS.New.Robot_Command.Types.KickMode.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) KickMode);
      }
      if (DesirePower != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(DesirePower);
      }
      if (KickDischargeTime != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(KickDischargeTime);
      }
      if (DribbleSpin != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(DribbleSpin);
      }
      if (NeedReport != false) {
        output.WriteRawTag(48);
        output.WriteBool(NeedReport);
      }
      if (CmdType != global::ZSS.New.Robot_Command.Types.CmdType.Stop) {
        output.WriteRawTag(56);
        output.WriteEnum((int) CmdType);
      }
      if (cmdVel_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CmdVel);
      }
      if (cmdPose_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(CmdPose);
      }
      if (cmdChase_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(CmdChase);
      }
      if (cmdWheel_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(CmdWheel);
      }
      if (CommType != global::ZSS.New.Robot_Command.Types.CommType.Default) {
        output.WriteRawTag(96);
        output.WriteEnum((int) CommType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (RobotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RobotId);
      }
      if (KickMode != global::ZSS.New.Robot_Command.Types.KickMode.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) KickMode);
      }
      if (DesirePower != 0F) {
        size += 1 + 4;
      }
      if (KickDischargeTime != 0F) {
        size += 1 + 4;
      }
      if (DribbleSpin != 0F) {
        size += 1 + 4;
      }
      if (NeedReport != false) {
        size += 1 + 1;
      }
      if (CmdType != global::ZSS.New.Robot_Command.Types.CmdType.Stop) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CmdType);
      }
      if (cmdVel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CmdVel);
      }
      if (cmdPose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CmdPose);
      }
      if (cmdChase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CmdChase);
      }
      if (cmdWheel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CmdWheel);
      }
      if (CommType != global::ZSS.New.Robot_Command.Types.CommType.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Robot_Command other) {
      if (other == null) {
        return;
      }
      if (other.RobotId != 0) {
        RobotId = other.RobotId;
      }
      if (other.KickMode != global::ZSS.New.Robot_Command.Types.KickMode.None) {
        KickMode = other.KickMode;
      }
      if (other.DesirePower != 0F) {
        DesirePower = other.DesirePower;
      }
      if (other.KickDischargeTime != 0F) {
        KickDischargeTime = other.KickDischargeTime;
      }
      if (other.DribbleSpin != 0F) {
        DribbleSpin = other.DribbleSpin;
      }
      if (other.NeedReport != false) {
        NeedReport = other.NeedReport;
      }
      if (other.CmdType != global::ZSS.New.Robot_Command.Types.CmdType.Stop) {
        CmdType = other.CmdType;
      }
      if (other.cmdVel_ != null) {
        if (cmdVel_ == null) {
          CmdVel = new global::ZSS.New.CmdVel();
        }
        CmdVel.MergeFrom(other.CmdVel);
      }
      if (other.cmdPose_ != null) {
        if (cmdPose_ == null) {
          CmdPose = new global::ZSS.New.CmdPose();
        }
        CmdPose.MergeFrom(other.CmdPose);
      }
      if (other.cmdChase_ != null) {
        if (cmdChase_ == null) {
          CmdChase = new global::ZSS.New.CmdChase();
        }
        CmdChase.MergeFrom(other.CmdChase);
      }
      if (other.cmdWheel_ != null) {
        if (cmdWheel_ == null) {
          CmdWheel = new global::ZSS.New.CmdWheel();
        }
        CmdWheel.MergeFrom(other.CmdWheel);
      }
      if (other.CommType != global::ZSS.New.Robot_Command.Types.CommType.Default) {
        CommType = other.CommType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RobotId = input.ReadInt32();
            break;
          }
          case 16: {
            KickMode = (global::ZSS.New.Robot_Command.Types.KickMode) input.ReadEnum();
            break;
          }
          case 29: {
            DesirePower = input.ReadFloat();
            break;
          }
          case 37: {
            KickDischargeTime = input.ReadFloat();
            break;
          }
          case 45: {
            DribbleSpin = input.ReadFloat();
            break;
          }
          case 48: {
            NeedReport = input.ReadBool();
            break;
          }
          case 56: {
            CmdType = (global::ZSS.New.Robot_Command.Types.CmdType) input.ReadEnum();
            break;
          }
          case 66: {
            if (cmdVel_ == null) {
              CmdVel = new global::ZSS.New.CmdVel();
            }
            input.ReadMessage(CmdVel);
            break;
          }
          case 74: {
            if (cmdPose_ == null) {
              CmdPose = new global::ZSS.New.CmdPose();
            }
            input.ReadMessage(CmdPose);
            break;
          }
          case 82: {
            if (cmdChase_ == null) {
              CmdChase = new global::ZSS.New.CmdChase();
            }
            input.ReadMessage(CmdChase);
            break;
          }
          case 90: {
            if (cmdWheel_ == null) {
              CmdWheel = new global::ZSS.New.CmdWheel();
            }
            input.ReadMessage(CmdWheel);
            break;
          }
          case 96: {
            CommType = (global::ZSS.New.Robot_Command.Types.CommType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RobotId = input.ReadInt32();
            break;
          }
          case 16: {
            KickMode = (global::ZSS.New.Robot_Command.Types.KickMode) input.ReadEnum();
            break;
          }
          case 29: {
            DesirePower = input.ReadFloat();
            break;
          }
          case 37: {
            KickDischargeTime = input.ReadFloat();
            break;
          }
          case 45: {
            DribbleSpin = input.ReadFloat();
            break;
          }
          case 48: {
            NeedReport = input.ReadBool();
            break;
          }
          case 56: {
            CmdType = (global::ZSS.New.Robot_Command.Types.CmdType) input.ReadEnum();
            break;
          }
          case 66: {
            if (cmdVel_ == null) {
              CmdVel = new global::ZSS.New.CmdVel();
            }
            input.ReadMessage(CmdVel);
            break;
          }
          case 74: {
            if (cmdPose_ == null) {
              CmdPose = new global::ZSS.New.CmdPose();
            }
            input.ReadMessage(CmdPose);
            break;
          }
          case 82: {
            if (cmdChase_ == null) {
              CmdChase = new global::ZSS.New.CmdChase();
            }
            input.ReadMessage(CmdChase);
            break;
          }
          case 90: {
            if (cmdWheel_ == null) {
              CmdWheel = new global::ZSS.New.CmdWheel();
            }
            input.ReadMessage(CmdWheel);
            break;
          }
          case 96: {
            CommType = (global::ZSS.New.Robot_Command.Types.CommType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Robot_Command message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum KickMode {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("KICK")] Kick = 1,
        [pbr::OriginalName("CHIP")] Chip = 2,
      }

      public enum CmdType {
        [pbr::OriginalName("STOP")] Stop = 0,
        [pbr::OriginalName("CMD_WHEEL")] CmdWheel = 1,
        [pbr::OriginalName("CMD_VEL")] CmdVel = 2,
        [pbr::OriginalName("CMD_POSE")] CmdPose = 3,
        [pbr::OriginalName("CMD_CHASE")] CmdChase = 4,
      }

      public enum CommType {
        [pbr::OriginalName("DEFAULT")] Default = 0,
        [pbr::OriginalName("SERIAL")] Serial = 1,
        [pbr::OriginalName("UDP_24L01")] Udp24L01 = 2,
        [pbr::OriginalName("UDP_WIFI")] UdpWifi = 3,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
