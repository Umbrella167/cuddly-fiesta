// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ssl_referee.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from ssl_referee.proto</summary>
public static partial class SslRefereeReflection {

  #region Descriptor
  /// <summary>File descriptor for ssl_referee.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static SslRefereeReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChFzc2xfcmVmZXJlZS5wcm90bxoUc3NsX2dhbWVfZXZlbnQucHJvdG8aGXNz",
          "bF9nYW1lX2V2ZW50XzIwMTkucHJvdG8iqQwKB1JlZmVyZWUSGAoQcGFja2V0",
          "X3RpbWVzdGFtcBgBIAIoBBIdCgVzdGFnZRgCIAIoDjIOLlJlZmVyZWUuU3Rh",
          "Z2USFwoPc3RhZ2VfdGltZV9sZWZ0GAMgASgREiEKB2NvbW1hbmQYBCACKA4y",
          "EC5SZWZlcmVlLkNvbW1hbmQSFwoPY29tbWFuZF9jb3VudGVyGAUgAigNEhkK",
          "EWNvbW1hbmRfdGltZXN0YW1wGAYgAigEEiEKBnllbGxvdxgHIAIoCzIRLlJl",
          "ZmVyZWUuVGVhbUluZm8SHwoEYmx1ZRgIIAIoCzIRLlJlZmVyZWUuVGVhbUlu",
          "Zm8SKwoTZGVzaWduYXRlZF9wb3NpdGlvbhgJIAEoCzIOLlJlZmVyZWUuUG9p",
          "bnQSIgoaYmx1ZV90ZWFtX29uX3Bvc2l0aXZlX2hhbGYYCiABKAgSIwoKZ2Ft",
          "ZV9ldmVudBgLIAEoCzILLkdhbWVfRXZlbnRCAhgBEiYKDG5leHRfY29tbWFu",
          "ZBgMIAEoDjIQLlJlZmVyZWUuQ29tbWFuZBIfCgtnYW1lX2V2ZW50cxgNIAMo",
          "CzIKLkdhbWVFdmVudBIwChRwcm9wb3NlZF9nYW1lX2V2ZW50cxgOIAMoCzIS",
          "LlByb3Bvc2VkR2FtZUV2ZW50EiUKHWN1cnJlbnRfYWN0aW9uX3RpbWVfcmVt",
          "YWluaW5nGA8gASgFGpQCCghUZWFtSW5mbxIMCgRuYW1lGAEgAigJEg0KBXNj",
          "b3JlGAIgAigNEhEKCXJlZF9jYXJkcxgDIAIoDRIdChF5ZWxsb3dfY2FyZF90",
          "aW1lcxgEIAMoDUICEAESFAoMeWVsbG93X2NhcmRzGAUgAigNEhAKCHRpbWVv",
          "dXRzGAYgAigNEhQKDHRpbWVvdXRfdGltZRgHIAIoDRISCgpnb2Fsa2VlcGVy",
          "GAggAigNEhQKDGZvdWxfY291bnRlchgJIAEoDRIfChdiYWxsX3BsYWNlbWVu",
          "dF9mYWlsdXJlcxgKIAEoDRIWCg5jYW5fcGxhY2VfYmFsbBgMIAEoCBIYChBt",
          "YXhfYWxsb3dlZF9ib3RzGA0gASgNGh0KBVBvaW50EgkKAXgYASACKAISCQoB",
          "eRgCIAIoAiLRAgoFU3RhZ2USGQoVTk9STUFMX0ZJUlNUX0hBTEZfUFJFEAAS",
          "FQoRTk9STUFMX0ZJUlNUX0hBTEYQARIUChBOT1JNQUxfSEFMRl9USU1FEAIS",
          "GgoWTk9STUFMX1NFQ09ORF9IQUxGX1BSRRADEhYKEk5PUk1BTF9TRUNPTkRf",
          "SEFMRhAEEhQKEEVYVFJBX1RJTUVfQlJFQUsQBRIYChRFWFRSQV9GSVJTVF9I",
          "QUxGX1BSRRAGEhQKEEVYVFJBX0ZJUlNUX0hBTEYQBxITCg9FWFRSQV9IQUxG",
          "X1RJTUUQCBIZChVFWFRSQV9TRUNPTkRfSEFMRl9QUkUQCRIVChFFWFRSQV9T",
          "RUNPTkRfSEFMRhAKEhoKFlBFTkFMVFlfU0hPT1RPVVRfQlJFQUsQCxIUChBQ",
          "RU5BTFRZX1NIT09UT1VUEAwSDQoJUE9TVF9HQU1FEA0ijgMKB0NvbW1hbmQS",
          "CAoESEFMVBAAEggKBFNUT1AQARIQCgxOT1JNQUxfU1RBUlQQAhIPCgtGT1JD",
          "RV9TVEFSVBADEhoKFlBSRVBBUkVfS0lDS09GRl9ZRUxMT1cQBBIYChRQUkVQ",
          "QVJFX0tJQ0tPRkZfQkxVRRAFEhoKFlBSRVBBUkVfUEVOQUxUWV9ZRUxMT1cQ",
          "BhIYChRQUkVQQVJFX1BFTkFMVFlfQkxVRRAHEhYKEkRJUkVDVF9GUkVFX1lF",
          "TExPVxAIEhQKEERJUkVDVF9GUkVFX0JMVUUQCRIYChRJTkRJUkVDVF9GUkVF",
          "X1lFTExPVxAKEhYKEklORElSRUNUX0ZSRUVfQkxVRRALEhIKDlRJTUVPVVRf",
          "WUVMTE9XEAwSEAoMVElNRU9VVF9CTFVFEA0SEwoLR09BTF9ZRUxMT1cQDhoC",
          "CAESEQoJR09BTF9CTFVFEA8aAggBEhkKFUJBTExfUExBQ0VNRU5UX1lFTExP",
          "VxAQEhcKE0JBTExfUExBQ0VNRU5UX0JMVUUQESJdChFQcm9wb3NlZEdhbWVF",
          "dmVudBITCgt2YWxpZF91bnRpbBgBIAIoBBITCgtwcm9wb3Nlcl9pZBgCIAIo",
          "CRIeCgpnYW1lX2V2ZW50GAMgAigLMgouR2FtZUV2ZW50"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::SslGameEventReflection.Descriptor, global::SslGameEvent2019Reflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Referee), global::Referee.Parser, new[]{ "PacketTimestamp", "Stage", "StageTimeLeft", "Command", "CommandCounter", "CommandTimestamp", "Yellow", "Blue", "DesignatedPosition", "BlueTeamOnPositiveHalf", "GameEvent", "NextCommand", "GameEvents", "ProposedGameEvents", "CurrentActionTimeRemaining" }, null, new[]{ typeof(global::Referee.Types.Stage), typeof(global::Referee.Types.Command) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Referee.Types.TeamInfo), global::Referee.Types.TeamInfo.Parser, new[]{ "Name", "Score", "RedCards", "YellowCardTimes", "YellowCards", "Timeouts", "TimeoutTime", "Goalkeeper", "FoulCounter", "BallPlacementFailures", "CanPlaceBall", "MaxAllowedBots" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Referee.Types.Point), global::Referee.Types.Point.Parser, new[]{ "X", "Y" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProposedGameEvent), global::ProposedGameEvent.Parser, new[]{ "ValidUntil", "ProposerId", "GameEvent" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// Each UDP packet contains one of these messages.
/// </summary>
public sealed partial class Referee : pb::IMessage<Referee>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<Referee> _parser = new pb::MessageParser<Referee>(() => new Referee());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<Referee> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SslRefereeReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public Referee() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public Referee(Referee other) : this() {
    _hasBits0 = other._hasBits0;
    packetTimestamp_ = other.packetTimestamp_;
    stage_ = other.stage_;
    stageTimeLeft_ = other.stageTimeLeft_;
    command_ = other.command_;
    commandCounter_ = other.commandCounter_;
    commandTimestamp_ = other.commandTimestamp_;
    yellow_ = other.yellow_ != null ? other.yellow_.Clone() : null;
    blue_ = other.blue_ != null ? other.blue_.Clone() : null;
    designatedPosition_ = other.designatedPosition_ != null ? other.designatedPosition_.Clone() : null;
    blueTeamOnPositiveHalf_ = other.blueTeamOnPositiveHalf_;
    gameEvent_ = other.gameEvent_ != null ? other.gameEvent_.Clone() : null;
    nextCommand_ = other.nextCommand_;
    gameEvents_ = other.gameEvents_.Clone();
    proposedGameEvents_ = other.proposedGameEvents_.Clone();
    currentActionTimeRemaining_ = other.currentActionTimeRemaining_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public Referee Clone() {
    return new Referee(this);
  }

  /// <summary>Field number for the "packet_timestamp" field.</summary>
  public const int PacketTimestampFieldNumber = 1;
  private readonly static ulong PacketTimestampDefaultValue = 0UL;

  private ulong packetTimestamp_;
  /// <summary>
  /// The UNIX timestamp when the packet was sent, in microseconds.
  /// Divide by 1,000,000 to get a time_t.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong PacketTimestamp {
    get { if ((_hasBits0 & 1) != 0) { return packetTimestamp_; } else { return PacketTimestampDefaultValue; } }
    set {
      _hasBits0 |= 1;
      packetTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "packet_timestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasPacketTimestamp {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "packet_timestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearPacketTimestamp() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "stage" field.</summary>
  public const int StageFieldNumber = 2;
  private readonly static global::Referee.Types.Stage StageDefaultValue = global::Referee.Types.Stage.NormalFirstHalfPre;

  private global::Referee.Types.Stage stage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Referee.Types.Stage Stage {
    get { if ((_hasBits0 & 2) != 0) { return stage_; } else { return StageDefaultValue; } }
    set {
      _hasBits0 |= 2;
      stage_ = value;
    }
  }
  /// <summary>Gets whether the "stage" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStage {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "stage" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStage() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "stage_time_left" field.</summary>
  public const int StageTimeLeftFieldNumber = 3;
  private readonly static int StageTimeLeftDefaultValue = 0;

  private int stageTimeLeft_;
  /// <summary>
  /// The number of microseconds left in the stage.
  /// The following stages have this value; the rest do not:
  /// NORMAL_FIRST_HALF
  /// NORMAL_HALF_TIME
  /// NORMAL_SECOND_HALF
  /// EXTRA_TIME_BREAK
  /// EXTRA_FIRST_HALF
  /// EXTRA_HALF_TIME
  /// EXTRA_SECOND_HALF
  /// PENALTY_SHOOTOUT_BREAK
  ///
  /// If the stage runs over its specified time, this value
  /// becomes negative.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int StageTimeLeft {
    get { if ((_hasBits0 & 4) != 0) { return stageTimeLeft_; } else { return StageTimeLeftDefaultValue; } }
    set {
      _hasBits0 |= 4;
      stageTimeLeft_ = value;
    }
  }
  /// <summary>Gets whether the "stage_time_left" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasStageTimeLeft {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "stage_time_left" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearStageTimeLeft() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "command" field.</summary>
  public const int CommandFieldNumber = 4;
  private readonly static global::Referee.Types.Command CommandDefaultValue = global::Referee.Types.Command.Halt;

  private global::Referee.Types.Command command_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Referee.Types.Command Command {
    get { if ((_hasBits0 & 8) != 0) { return command_; } else { return CommandDefaultValue; } }
    set {
      _hasBits0 |= 8;
      command_ = value;
    }
  }
  /// <summary>Gets whether the "command" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCommand {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "command" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCommand() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "command_counter" field.</summary>
  public const int CommandCounterFieldNumber = 5;
  private readonly static uint CommandCounterDefaultValue = 0;

  private uint commandCounter_;
  /// <summary>
  /// The number of commands issued since startup (mod 2^32).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public uint CommandCounter {
    get { if ((_hasBits0 & 16) != 0) { return commandCounter_; } else { return CommandCounterDefaultValue; } }
    set {
      _hasBits0 |= 16;
      commandCounter_ = value;
    }
  }
  /// <summary>Gets whether the "command_counter" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCommandCounter {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "command_counter" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCommandCounter() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "command_timestamp" field.</summary>
  public const int CommandTimestampFieldNumber = 6;
  private readonly static ulong CommandTimestampDefaultValue = 0UL;

  private ulong commandTimestamp_;
  /// <summary>
  /// The UNIX timestamp when the command was issued, in microseconds.
  /// This value changes only when a new command is issued, not on each packet.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong CommandTimestamp {
    get { if ((_hasBits0 & 32) != 0) { return commandTimestamp_; } else { return CommandTimestampDefaultValue; } }
    set {
      _hasBits0 |= 32;
      commandTimestamp_ = value;
    }
  }
  /// <summary>Gets whether the "command_timestamp" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCommandTimestamp {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "command_timestamp" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCommandTimestamp() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "yellow" field.</summary>
  public const int YellowFieldNumber = 7;
  private global::Referee.Types.TeamInfo yellow_;
  /// <summary>
  /// Information about the two teams.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Referee.Types.TeamInfo Yellow {
    get { return yellow_; }
    set {
      yellow_ = value;
    }
  }

  /// <summary>Field number for the "blue" field.</summary>
  public const int BlueFieldNumber = 8;
  private global::Referee.Types.TeamInfo blue_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Referee.Types.TeamInfo Blue {
    get { return blue_; }
    set {
      blue_ = value;
    }
  }

  /// <summary>Field number for the "designated_position" field.</summary>
  public const int DesignatedPositionFieldNumber = 9;
  private global::Referee.Types.Point designatedPosition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Referee.Types.Point DesignatedPosition {
    get { return designatedPosition_; }
    set {
      designatedPosition_ = value;
    }
  }

  /// <summary>Field number for the "blue_team_on_positive_half" field.</summary>
  public const int BlueTeamOnPositiveHalfFieldNumber = 10;
  private readonly static bool BlueTeamOnPositiveHalfDefaultValue = false;

  private bool blueTeamOnPositiveHalf_;
  /// <summary>
  /// Information about the direction of play.
  /// True, if the blue team will have it's goal on the positive x-axis of the ssl-vision coordinate system.
  /// Obviously, the yellow team will play on the opposite half.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool BlueTeamOnPositiveHalf {
    get { if ((_hasBits0 & 64) != 0) { return blueTeamOnPositiveHalf_; } else { return BlueTeamOnPositiveHalfDefaultValue; } }
    set {
      _hasBits0 |= 64;
      blueTeamOnPositiveHalf_ = value;
    }
  }
  /// <summary>Gets whether the "blue_team_on_positive_half" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasBlueTeamOnPositiveHalf {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "blue_team_on_positive_half" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearBlueTeamOnPositiveHalf() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "game_event" field.</summary>
  public const int GameEventFieldNumber = 11;
  private global::Game_Event gameEvent_;
  /// <summary>
  /// The game event that caused the referee command.
  /// deprecated in favor of game_events.
  /// </summary>
  [global::System.ObsoleteAttribute]
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Game_Event GameEvent {
    get { return gameEvent_; }
    set {
      gameEvent_ = value;
    }
  }

  /// <summary>Field number for the "next_command" field.</summary>
  public const int NextCommandFieldNumber = 12;
  private readonly static global::Referee.Types.Command NextCommandDefaultValue = global::Referee.Types.Command.Halt;

  private global::Referee.Types.Command nextCommand_;
  /// <summary>
  /// The command that will be issued after the current stoppage and ball placement to continue the game.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::Referee.Types.Command NextCommand {
    get { if ((_hasBits0 & 128) != 0) { return nextCommand_; } else { return NextCommandDefaultValue; } }
    set {
      _hasBits0 |= 128;
      nextCommand_ = value;
    }
  }
  /// <summary>Gets whether the "next_command" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasNextCommand {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "next_command" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearNextCommand() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "game_events" field.</summary>
  public const int GameEventsFieldNumber = 13;
  private static readonly pb::FieldCodec<global::GameEvent> _repeated_gameEvents_codec
      = pb::FieldCodec.ForMessage(106, global::GameEvent.Parser);
  private readonly pbc::RepeatedField<global::GameEvent> gameEvents_ = new pbc::RepeatedField<global::GameEvent>();
  /// <summary>
  /// All game events that were detected since the last RUNNING state.
  /// Will be cleared as soon as the game is continued.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::GameEvent> GameEvents {
    get { return gameEvents_; }
  }

  /// <summary>Field number for the "proposed_game_events" field.</summary>
  public const int ProposedGameEventsFieldNumber = 14;
  private static readonly pb::FieldCodec<global::ProposedGameEvent> _repeated_proposedGameEvents_codec
      = pb::FieldCodec.ForMessage(114, global::ProposedGameEvent.Parser);
  private readonly pbc::RepeatedField<global::ProposedGameEvent> proposedGameEvents_ = new pbc::RepeatedField<global::ProposedGameEvent>();
  /// <summary>
  /// All non-finished proposed game events that may be processed next.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public pbc::RepeatedField<global::ProposedGameEvent> ProposedGameEvents {
    get { return proposedGameEvents_; }
  }

  /// <summary>Field number for the "current_action_time_remaining" field.</summary>
  public const int CurrentActionTimeRemainingFieldNumber = 15;
  private readonly static int CurrentActionTimeRemainingDefaultValue = 0;

  private int currentActionTimeRemaining_;
  /// <summary>
  /// The time in microseconds that is remaining until the current action times out
  /// The time will not be reset. It can get negative.
  /// An autoRef would raise an appropriate event, if the time gets negative.
  /// Possible actions where this time is relevant:
  ///  * free kicks
  ///  * kickoff, penalty kick, force start
  ///  * ball placement
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CurrentActionTimeRemaining {
    get { if ((_hasBits0 & 256) != 0) { return currentActionTimeRemaining_; } else { return CurrentActionTimeRemainingDefaultValue; } }
    set {
      _hasBits0 |= 256;
      currentActionTimeRemaining_ = value;
    }
  }
  /// <summary>Gets whether the "current_action_time_remaining" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCurrentActionTimeRemaining {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "current_action_time_remaining" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCurrentActionTimeRemaining() {
    _hasBits0 &= ~256;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as Referee);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(Referee other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PacketTimestamp != other.PacketTimestamp) return false;
    if (Stage != other.Stage) return false;
    if (StageTimeLeft != other.StageTimeLeft) return false;
    if (Command != other.Command) return false;
    if (CommandCounter != other.CommandCounter) return false;
    if (CommandTimestamp != other.CommandTimestamp) return false;
    if (!object.Equals(Yellow, other.Yellow)) return false;
    if (!object.Equals(Blue, other.Blue)) return false;
    if (!object.Equals(DesignatedPosition, other.DesignatedPosition)) return false;
    if (BlueTeamOnPositiveHalf != other.BlueTeamOnPositiveHalf) return false;
    if (!object.Equals(GameEvent, other.GameEvent)) return false;
    if (NextCommand != other.NextCommand) return false;
    if(!gameEvents_.Equals(other.gameEvents_)) return false;
    if(!proposedGameEvents_.Equals(other.proposedGameEvents_)) return false;
    if (CurrentActionTimeRemaining != other.CurrentActionTimeRemaining) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPacketTimestamp) hash ^= PacketTimestamp.GetHashCode();
    if (HasStage) hash ^= Stage.GetHashCode();
    if (HasStageTimeLeft) hash ^= StageTimeLeft.GetHashCode();
    if (HasCommand) hash ^= Command.GetHashCode();
    if (HasCommandCounter) hash ^= CommandCounter.GetHashCode();
    if (HasCommandTimestamp) hash ^= CommandTimestamp.GetHashCode();
    if (yellow_ != null) hash ^= Yellow.GetHashCode();
    if (blue_ != null) hash ^= Blue.GetHashCode();
    if (designatedPosition_ != null) hash ^= DesignatedPosition.GetHashCode();
    if (HasBlueTeamOnPositiveHalf) hash ^= BlueTeamOnPositiveHalf.GetHashCode();
    if (gameEvent_ != null) hash ^= GameEvent.GetHashCode();
    if (HasNextCommand) hash ^= NextCommand.GetHashCode();
    hash ^= gameEvents_.GetHashCode();
    hash ^= proposedGameEvents_.GetHashCode();
    if (HasCurrentActionTimeRemaining) hash ^= CurrentActionTimeRemaining.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasPacketTimestamp) {
      output.WriteRawTag(8);
      output.WriteUInt64(PacketTimestamp);
    }
    if (HasStage) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Stage);
    }
    if (HasStageTimeLeft) {
      output.WriteRawTag(24);
      output.WriteSInt32(StageTimeLeft);
    }
    if (HasCommand) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Command);
    }
    if (HasCommandCounter) {
      output.WriteRawTag(40);
      output.WriteUInt32(CommandCounter);
    }
    if (HasCommandTimestamp) {
      output.WriteRawTag(48);
      output.WriteUInt64(CommandTimestamp);
    }
    if (yellow_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(Yellow);
    }
    if (blue_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(Blue);
    }
    if (designatedPosition_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(DesignatedPosition);
    }
    if (HasBlueTeamOnPositiveHalf) {
      output.WriteRawTag(80);
      output.WriteBool(BlueTeamOnPositiveHalf);
    }
    if (gameEvent_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(GameEvent);
    }
    if (HasNextCommand) {
      output.WriteRawTag(96);
      output.WriteEnum((int) NextCommand);
    }
    gameEvents_.WriteTo(output, _repeated_gameEvents_codec);
    proposedGameEvents_.WriteTo(output, _repeated_proposedGameEvents_codec);
    if (HasCurrentActionTimeRemaining) {
      output.WriteRawTag(120);
      output.WriteInt32(CurrentActionTimeRemaining);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasPacketTimestamp) {
      output.WriteRawTag(8);
      output.WriteUInt64(PacketTimestamp);
    }
    if (HasStage) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Stage);
    }
    if (HasStageTimeLeft) {
      output.WriteRawTag(24);
      output.WriteSInt32(StageTimeLeft);
    }
    if (HasCommand) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Command);
    }
    if (HasCommandCounter) {
      output.WriteRawTag(40);
      output.WriteUInt32(CommandCounter);
    }
    if (HasCommandTimestamp) {
      output.WriteRawTag(48);
      output.WriteUInt64(CommandTimestamp);
    }
    if (yellow_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(Yellow);
    }
    if (blue_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(Blue);
    }
    if (designatedPosition_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(DesignatedPosition);
    }
    if (HasBlueTeamOnPositiveHalf) {
      output.WriteRawTag(80);
      output.WriteBool(BlueTeamOnPositiveHalf);
    }
    if (gameEvent_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(GameEvent);
    }
    if (HasNextCommand) {
      output.WriteRawTag(96);
      output.WriteEnum((int) NextCommand);
    }
    gameEvents_.WriteTo(ref output, _repeated_gameEvents_codec);
    proposedGameEvents_.WriteTo(ref output, _repeated_proposedGameEvents_codec);
    if (HasCurrentActionTimeRemaining) {
      output.WriteRawTag(120);
      output.WriteInt32(CurrentActionTimeRemaining);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasPacketTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PacketTimestamp);
    }
    if (HasStage) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Stage);
    }
    if (HasStageTimeLeft) {
      size += 1 + pb::CodedOutputStream.ComputeSInt32Size(StageTimeLeft);
    }
    if (HasCommand) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Command);
    }
    if (HasCommandCounter) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CommandCounter);
    }
    if (HasCommandTimestamp) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CommandTimestamp);
    }
    if (yellow_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Yellow);
    }
    if (blue_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Blue);
    }
    if (designatedPosition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DesignatedPosition);
    }
    if (HasBlueTeamOnPositiveHalf) {
      size += 1 + 1;
    }
    if (gameEvent_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameEvent);
    }
    if (HasNextCommand) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NextCommand);
    }
    size += gameEvents_.CalculateSize(_repeated_gameEvents_codec);
    size += proposedGameEvents_.CalculateSize(_repeated_proposedGameEvents_codec);
    if (HasCurrentActionTimeRemaining) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentActionTimeRemaining);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(Referee other) {
    if (other == null) {
      return;
    }
    if (other.HasPacketTimestamp) {
      PacketTimestamp = other.PacketTimestamp;
    }
    if (other.HasStage) {
      Stage = other.Stage;
    }
    if (other.HasStageTimeLeft) {
      StageTimeLeft = other.StageTimeLeft;
    }
    if (other.HasCommand) {
      Command = other.Command;
    }
    if (other.HasCommandCounter) {
      CommandCounter = other.CommandCounter;
    }
    if (other.HasCommandTimestamp) {
      CommandTimestamp = other.CommandTimestamp;
    }
    if (other.yellow_ != null) {
      if (yellow_ == null) {
        Yellow = new global::Referee.Types.TeamInfo();
      }
      Yellow.MergeFrom(other.Yellow);
    }
    if (other.blue_ != null) {
      if (blue_ == null) {
        Blue = new global::Referee.Types.TeamInfo();
      }
      Blue.MergeFrom(other.Blue);
    }
    if (other.designatedPosition_ != null) {
      if (designatedPosition_ == null) {
        DesignatedPosition = new global::Referee.Types.Point();
      }
      DesignatedPosition.MergeFrom(other.DesignatedPosition);
    }
    if (other.HasBlueTeamOnPositiveHalf) {
      BlueTeamOnPositiveHalf = other.BlueTeamOnPositiveHalf;
    }
    if (other.gameEvent_ != null) {
      if (gameEvent_ == null) {
        GameEvent = new global::Game_Event();
      }
      GameEvent.MergeFrom(other.GameEvent);
    }
    if (other.HasNextCommand) {
      NextCommand = other.NextCommand;
    }
    gameEvents_.Add(other.gameEvents_);
    proposedGameEvents_.Add(other.proposedGameEvents_);
    if (other.HasCurrentActionTimeRemaining) {
      CurrentActionTimeRemaining = other.CurrentActionTimeRemaining;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PacketTimestamp = input.ReadUInt64();
          break;
        }
        case 16: {
          Stage = (global::Referee.Types.Stage) input.ReadEnum();
          break;
        }
        case 24: {
          StageTimeLeft = input.ReadSInt32();
          break;
        }
        case 32: {
          Command = (global::Referee.Types.Command) input.ReadEnum();
          break;
        }
        case 40: {
          CommandCounter = input.ReadUInt32();
          break;
        }
        case 48: {
          CommandTimestamp = input.ReadUInt64();
          break;
        }
        case 58: {
          if (yellow_ == null) {
            Yellow = new global::Referee.Types.TeamInfo();
          }
          input.ReadMessage(Yellow);
          break;
        }
        case 66: {
          if (blue_ == null) {
            Blue = new global::Referee.Types.TeamInfo();
          }
          input.ReadMessage(Blue);
          break;
        }
        case 74: {
          if (designatedPosition_ == null) {
            DesignatedPosition = new global::Referee.Types.Point();
          }
          input.ReadMessage(DesignatedPosition);
          break;
        }
        case 80: {
          BlueTeamOnPositiveHalf = input.ReadBool();
          break;
        }
        case 90: {
          if (gameEvent_ == null) {
            GameEvent = new global::Game_Event();
          }
          input.ReadMessage(GameEvent);
          break;
        }
        case 96: {
          NextCommand = (global::Referee.Types.Command) input.ReadEnum();
          break;
        }
        case 106: {
          gameEvents_.AddEntriesFrom(input, _repeated_gameEvents_codec);
          break;
        }
        case 114: {
          proposedGameEvents_.AddEntriesFrom(input, _repeated_proposedGameEvents_codec);
          break;
        }
        case 120: {
          CurrentActionTimeRemaining = input.ReadInt32();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          PacketTimestamp = input.ReadUInt64();
          break;
        }
        case 16: {
          Stage = (global::Referee.Types.Stage) input.ReadEnum();
          break;
        }
        case 24: {
          StageTimeLeft = input.ReadSInt32();
          break;
        }
        case 32: {
          Command = (global::Referee.Types.Command) input.ReadEnum();
          break;
        }
        case 40: {
          CommandCounter = input.ReadUInt32();
          break;
        }
        case 48: {
          CommandTimestamp = input.ReadUInt64();
          break;
        }
        case 58: {
          if (yellow_ == null) {
            Yellow = new global::Referee.Types.TeamInfo();
          }
          input.ReadMessage(Yellow);
          break;
        }
        case 66: {
          if (blue_ == null) {
            Blue = new global::Referee.Types.TeamInfo();
          }
          input.ReadMessage(Blue);
          break;
        }
        case 74: {
          if (designatedPosition_ == null) {
            DesignatedPosition = new global::Referee.Types.Point();
          }
          input.ReadMessage(DesignatedPosition);
          break;
        }
        case 80: {
          BlueTeamOnPositiveHalf = input.ReadBool();
          break;
        }
        case 90: {
          if (gameEvent_ == null) {
            GameEvent = new global::Game_Event();
          }
          input.ReadMessage(GameEvent);
          break;
        }
        case 96: {
          NextCommand = (global::Referee.Types.Command) input.ReadEnum();
          break;
        }
        case 106: {
          gameEvents_.AddEntriesFrom(ref input, _repeated_gameEvents_codec);
          break;
        }
        case 114: {
          proposedGameEvents_.AddEntriesFrom(ref input, _repeated_proposedGameEvents_codec);
          break;
        }
        case 120: {
          CurrentActionTimeRemaining = input.ReadInt32();
          break;
        }
      }
    }
  }
  #endif

  #region Nested types
  /// <summary>Container for nested types declared in the Referee message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static partial class Types {
    /// <summary>
    /// These are the "coarse" stages of the game.
    /// </summary>
    public enum Stage {
      /// <summary>
      /// The first half is about to start.
      /// A kickoff is called within this stage.
      /// This stage ends with the NORMAL_START.
      /// </summary>
      [pbr::OriginalName("NORMAL_FIRST_HALF_PRE")] NormalFirstHalfPre = 0,
      /// <summary>
      /// The first half of the normal game, before half time.
      /// </summary>
      [pbr::OriginalName("NORMAL_FIRST_HALF")] NormalFirstHalf = 1,
      /// <summary>
      /// Half time between first and second halves.
      /// </summary>
      [pbr::OriginalName("NORMAL_HALF_TIME")] NormalHalfTime = 2,
      /// <summary>
      /// The second half is about to start.
      /// A kickoff is called within this stage.
      /// This stage ends with the NORMAL_START.
      /// </summary>
      [pbr::OriginalName("NORMAL_SECOND_HALF_PRE")] NormalSecondHalfPre = 3,
      /// <summary>
      /// The second half of the normal game, after half time.
      /// </summary>
      [pbr::OriginalName("NORMAL_SECOND_HALF")] NormalSecondHalf = 4,
      /// <summary>
      /// The break before extra time.
      /// </summary>
      [pbr::OriginalName("EXTRA_TIME_BREAK")] ExtraTimeBreak = 5,
      /// <summary>
      /// The first half of extra time is about to start.
      /// A kickoff is called within this stage.
      /// This stage ends with the NORMAL_START.
      /// </summary>
      [pbr::OriginalName("EXTRA_FIRST_HALF_PRE")] ExtraFirstHalfPre = 6,
      /// <summary>
      /// The first half of extra time.
      /// </summary>
      [pbr::OriginalName("EXTRA_FIRST_HALF")] ExtraFirstHalf = 7,
      /// <summary>
      /// Half time between first and second extra halves.
      /// </summary>
      [pbr::OriginalName("EXTRA_HALF_TIME")] ExtraHalfTime = 8,
      /// <summary>
      /// The second half of extra time is about to start.
      /// A kickoff is called within this stage.
      /// This stage ends with the NORMAL_START.
      /// </summary>
      [pbr::OriginalName("EXTRA_SECOND_HALF_PRE")] ExtraSecondHalfPre = 9,
      /// <summary>
      /// The second half of extra time.
      /// </summary>
      [pbr::OriginalName("EXTRA_SECOND_HALF")] ExtraSecondHalf = 10,
      /// <summary>
      /// The break before penalty shootout.
      /// </summary>
      [pbr::OriginalName("PENALTY_SHOOTOUT_BREAK")] PenaltyShootoutBreak = 11,
      /// <summary>
      /// The penalty shootout.
      /// </summary>
      [pbr::OriginalName("PENALTY_SHOOTOUT")] PenaltyShootout = 12,
      /// <summary>
      /// The game is over.
      /// </summary>
      [pbr::OriginalName("POST_GAME")] PostGame = 13,
    }

    /// <summary>
    /// These are the "fine" states of play on the field.
    /// </summary>
    public enum Command {
      /// <summary>
      /// All robots should completely stop moving.
      /// </summary>
      [pbr::OriginalName("HALT")] Halt = 0,
      /// <summary>
      /// Robots must keep 50 cm from the ball.
      /// </summary>
      [pbr::OriginalName("STOP")] Stop = 1,
      /// <summary>
      /// A prepared kickoff or penalty may now be taken.
      /// </summary>
      [pbr::OriginalName("NORMAL_START")] NormalStart = 2,
      /// <summary>
      /// The ball is dropped and free for either team.
      /// </summary>
      [pbr::OriginalName("FORCE_START")] ForceStart = 3,
      /// <summary>
      /// The yellow team may move into kickoff position.
      /// </summary>
      [pbr::OriginalName("PREPARE_KICKOFF_YELLOW")] PrepareKickoffYellow = 4,
      /// <summary>
      /// The blue team may move into kickoff position.
      /// </summary>
      [pbr::OriginalName("PREPARE_KICKOFF_BLUE")] PrepareKickoffBlue = 5,
      /// <summary>
      /// The yellow team may move into penalty position.
      /// </summary>
      [pbr::OriginalName("PREPARE_PENALTY_YELLOW")] PreparePenaltyYellow = 6,
      /// <summary>
      /// The blue team may move into penalty position.
      /// </summary>
      [pbr::OriginalName("PREPARE_PENALTY_BLUE")] PreparePenaltyBlue = 7,
      /// <summary>
      /// The yellow team may take a direct free kick.
      /// </summary>
      [pbr::OriginalName("DIRECT_FREE_YELLOW")] DirectFreeYellow = 8,
      /// <summary>
      /// The blue team may take a direct free kick.
      /// </summary>
      [pbr::OriginalName("DIRECT_FREE_BLUE")] DirectFreeBlue = 9,
      /// <summary>
      /// The yellow team may take an indirect free kick.
      /// </summary>
      [pbr::OriginalName("INDIRECT_FREE_YELLOW")] IndirectFreeYellow = 10,
      /// <summary>
      /// The blue team may take an indirect free kick.
      /// </summary>
      [pbr::OriginalName("INDIRECT_FREE_BLUE")] IndirectFreeBlue = 11,
      /// <summary>
      /// The yellow team is currently in a timeout.
      /// </summary>
      [pbr::OriginalName("TIMEOUT_YELLOW")] TimeoutYellow = 12,
      /// <summary>
      /// The blue team is currently in a timeout.
      /// </summary>
      [pbr::OriginalName("TIMEOUT_BLUE")] TimeoutBlue = 13,
      /// <summary>
      /// The yellow team just scored a goal.
      /// For information only.
      /// For rules compliance, teams must treat as STOP.
      /// Deprecated: Use the score field from the team infos instead. That way, you can also detect revoked goals.
      /// </summary>
      [pbr::OriginalName("GOAL_YELLOW")] GoalYellow = 14,
      /// <summary>
      /// The blue team just scored a goal. See also GOAL_YELLOW.
      /// </summary>
      [pbr::OriginalName("GOAL_BLUE")] GoalBlue = 15,
      /// <summary>
      /// Equivalent to STOP, but the yellow team must pick up the ball and
      /// drop it in the Designated Position.
      /// </summary>
      [pbr::OriginalName("BALL_PLACEMENT_YELLOW")] BallPlacementYellow = 16,
      /// <summary>
      /// Equivalent to STOP, but the blue team must pick up the ball and drop
      /// it in the Designated Position.
      /// </summary>
      [pbr::OriginalName("BALL_PLACEMENT_BLUE")] BallPlacementBlue = 17,
    }

    /// <summary>
    /// Information about a single team.
    /// </summary>
    public sealed partial class TeamInfo : pb::IMessage<TeamInfo>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<TeamInfo> _parser = new pb::MessageParser<TeamInfo>(() => new TeamInfo());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<TeamInfo> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::Referee.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public TeamInfo() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public TeamInfo(TeamInfo other) : this() {
        _hasBits0 = other._hasBits0;
        name_ = other.name_;
        score_ = other.score_;
        redCards_ = other.redCards_;
        yellowCardTimes_ = other.yellowCardTimes_.Clone();
        yellowCards_ = other.yellowCards_;
        timeouts_ = other.timeouts_;
        timeoutTime_ = other.timeoutTime_;
        goalkeeper_ = other.goalkeeper_;
        foulCounter_ = other.foulCounter_;
        ballPlacementFailures_ = other.ballPlacementFailures_;
        canPlaceBall_ = other.canPlaceBall_;
        maxAllowedBots_ = other.maxAllowedBots_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public TeamInfo Clone() {
        return new TeamInfo(this);
      }

      /// <summary>Field number for the "name" field.</summary>
      public const int NameFieldNumber = 1;
      private readonly static string NameDefaultValue = "";

      private string name_;
      /// <summary>
      /// The team's name (empty string if operator has not typed anything).
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public string Name {
        get { return name_ ?? NameDefaultValue; }
        set {
          name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "name" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasName {
        get { return name_ != null; }
      }
      /// <summary>Clears the value of the "name" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearName() {
        name_ = null;
      }

      /// <summary>Field number for the "score" field.</summary>
      public const int ScoreFieldNumber = 2;
      private readonly static uint ScoreDefaultValue = 0;

      private uint score_;
      /// <summary>
      /// The number of goals scored by the team during normal play and overtime.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Score {
        get { if ((_hasBits0 & 1) != 0) { return score_; } else { return ScoreDefaultValue; } }
        set {
          _hasBits0 |= 1;
          score_ = value;
        }
      }
      /// <summary>Gets whether the "score" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasScore {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "score" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearScore() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "red_cards" field.</summary>
      public const int RedCardsFieldNumber = 3;
      private readonly static uint RedCardsDefaultValue = 0;

      private uint redCards_;
      /// <summary>
      /// The number of red cards issued to the team since the beginning of the game.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint RedCards {
        get { if ((_hasBits0 & 2) != 0) { return redCards_; } else { return RedCardsDefaultValue; } }
        set {
          _hasBits0 |= 2;
          redCards_ = value;
        }
      }
      /// <summary>Gets whether the "red_cards" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasRedCards {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "red_cards" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearRedCards() {
        _hasBits0 &= ~2;
      }

      /// <summary>Field number for the "yellow_card_times" field.</summary>
      public const int YellowCardTimesFieldNumber = 4;
      private static readonly pb::FieldCodec<uint> _repeated_yellowCardTimes_codec
          = pb::FieldCodec.ForUInt32(34);
      private readonly pbc::RepeatedField<uint> yellowCardTimes_ = new pbc::RepeatedField<uint>();
      /// <summary>
      /// The amount of time (in microseconds) left on each yellow card issued to the team.
      /// If no yellow cards are issued, this array has no elements.
      /// Otherwise, times are ordered from smallest to largest.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public pbc::RepeatedField<uint> YellowCardTimes {
        get { return yellowCardTimes_; }
      }

      /// <summary>Field number for the "yellow_cards" field.</summary>
      public const int YellowCardsFieldNumber = 5;
      private readonly static uint YellowCardsDefaultValue = 0;

      private uint yellowCards_;
      /// <summary>
      /// The total number of yellow cards ever issued to the team.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint YellowCards {
        get { if ((_hasBits0 & 4) != 0) { return yellowCards_; } else { return YellowCardsDefaultValue; } }
        set {
          _hasBits0 |= 4;
          yellowCards_ = value;
        }
      }
      /// <summary>Gets whether the "yellow_cards" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasYellowCards {
        get { return (_hasBits0 & 4) != 0; }
      }
      /// <summary>Clears the value of the "yellow_cards" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearYellowCards() {
        _hasBits0 &= ~4;
      }

      /// <summary>Field number for the "timeouts" field.</summary>
      public const int TimeoutsFieldNumber = 6;
      private readonly static uint TimeoutsDefaultValue = 0;

      private uint timeouts_;
      /// <summary>
      /// The number of timeouts this team can still call.
      /// If in a timeout right now, that timeout is excluded.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Timeouts {
        get { if ((_hasBits0 & 8) != 0) { return timeouts_; } else { return TimeoutsDefaultValue; } }
        set {
          _hasBits0 |= 8;
          timeouts_ = value;
        }
      }
      /// <summary>Gets whether the "timeouts" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasTimeouts {
        get { return (_hasBits0 & 8) != 0; }
      }
      /// <summary>Clears the value of the "timeouts" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearTimeouts() {
        _hasBits0 &= ~8;
      }

      /// <summary>Field number for the "timeout_time" field.</summary>
      public const int TimeoutTimeFieldNumber = 7;
      private readonly static uint TimeoutTimeDefaultValue = 0;

      private uint timeoutTime_;
      /// <summary>
      /// The number of microseconds of timeout this team can use.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint TimeoutTime {
        get { if ((_hasBits0 & 16) != 0) { return timeoutTime_; } else { return TimeoutTimeDefaultValue; } }
        set {
          _hasBits0 |= 16;
          timeoutTime_ = value;
        }
      }
      /// <summary>Gets whether the "timeout_time" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasTimeoutTime {
        get { return (_hasBits0 & 16) != 0; }
      }
      /// <summary>Clears the value of the "timeout_time" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearTimeoutTime() {
        _hasBits0 &= ~16;
      }

      /// <summary>Field number for the "goalkeeper" field.</summary>
      public const int GoalkeeperFieldNumber = 8;
      private readonly static uint GoalkeeperDefaultValue = 0;

      private uint goalkeeper_;
      /// <summary>
      /// The pattern number of this team's goalkeeper.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint Goalkeeper {
        get { if ((_hasBits0 & 32) != 0) { return goalkeeper_; } else { return GoalkeeperDefaultValue; } }
        set {
          _hasBits0 |= 32;
          goalkeeper_ = value;
        }
      }
      /// <summary>Gets whether the "goalkeeper" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasGoalkeeper {
        get { return (_hasBits0 & 32) != 0; }
      }
      /// <summary>Clears the value of the "goalkeeper" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearGoalkeeper() {
        _hasBits0 &= ~32;
      }

      /// <summary>Field number for the "foul_counter" field.</summary>
      public const int FoulCounterFieldNumber = 9;
      private readonly static uint FoulCounterDefaultValue = 0;

      private uint foulCounter_;
      /// <summary>
      /// The total number of countable fouls that act towards yellow cards
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint FoulCounter {
        get { if ((_hasBits0 & 64) != 0) { return foulCounter_; } else { return FoulCounterDefaultValue; } }
        set {
          _hasBits0 |= 64;
          foulCounter_ = value;
        }
      }
      /// <summary>Gets whether the "foul_counter" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasFoulCounter {
        get { return (_hasBits0 & 64) != 0; }
      }
      /// <summary>Clears the value of the "foul_counter" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearFoulCounter() {
        _hasBits0 &= ~64;
      }

      /// <summary>Field number for the "ball_placement_failures" field.</summary>
      public const int BallPlacementFailuresFieldNumber = 10;
      private readonly static uint BallPlacementFailuresDefaultValue = 0;

      private uint ballPlacementFailures_;
      /// <summary>
      /// The number of consecutive ball placement failures of this team
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint BallPlacementFailures {
        get { if ((_hasBits0 & 128) != 0) { return ballPlacementFailures_; } else { return BallPlacementFailuresDefaultValue; } }
        set {
          _hasBits0 |= 128;
          ballPlacementFailures_ = value;
        }
      }
      /// <summary>Gets whether the "ball_placement_failures" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasBallPlacementFailures {
        get { return (_hasBits0 & 128) != 0; }
      }
      /// <summary>Clears the value of the "ball_placement_failures" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearBallPlacementFailures() {
        _hasBits0 &= ~128;
      }

      /// <summary>Field number for the "can_place_ball" field.</summary>
      public const int CanPlaceBallFieldNumber = 12;
      private readonly static bool CanPlaceBallDefaultValue = false;

      private bool canPlaceBall_;
      /// <summary>
      /// Indicate if the team is able and allowed to place the ball
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool CanPlaceBall {
        get { if ((_hasBits0 & 256) != 0) { return canPlaceBall_; } else { return CanPlaceBallDefaultValue; } }
        set {
          _hasBits0 |= 256;
          canPlaceBall_ = value;
        }
      }
      /// <summary>Gets whether the "can_place_ball" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasCanPlaceBall {
        get { return (_hasBits0 & 256) != 0; }
      }
      /// <summary>Clears the value of the "can_place_ball" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearCanPlaceBall() {
        _hasBits0 &= ~256;
      }

      /// <summary>Field number for the "max_allowed_bots" field.</summary>
      public const int MaxAllowedBotsFieldNumber = 13;
      private readonly static uint MaxAllowedBotsDefaultValue = 0;

      private uint maxAllowedBots_;
      /// <summary>
      /// The maximum number of bots allowed on the field based on division and cards
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public uint MaxAllowedBots {
        get { if ((_hasBits0 & 512) != 0) { return maxAllowedBots_; } else { return MaxAllowedBotsDefaultValue; } }
        set {
          _hasBits0 |= 512;
          maxAllowedBots_ = value;
        }
      }
      /// <summary>Gets whether the "max_allowed_bots" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasMaxAllowedBots {
        get { return (_hasBits0 & 512) != 0; }
      }
      /// <summary>Clears the value of the "max_allowed_bots" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearMaxAllowedBots() {
        _hasBits0 &= ~512;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as TeamInfo);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(TeamInfo other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Name != other.Name) return false;
        if (Score != other.Score) return false;
        if (RedCards != other.RedCards) return false;
        if(!yellowCardTimes_.Equals(other.yellowCardTimes_)) return false;
        if (YellowCards != other.YellowCards) return false;
        if (Timeouts != other.Timeouts) return false;
        if (TimeoutTime != other.TimeoutTime) return false;
        if (Goalkeeper != other.Goalkeeper) return false;
        if (FoulCounter != other.FoulCounter) return false;
        if (BallPlacementFailures != other.BallPlacementFailures) return false;
        if (CanPlaceBall != other.CanPlaceBall) return false;
        if (MaxAllowedBots != other.MaxAllowedBots) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasName) hash ^= Name.GetHashCode();
        if (HasScore) hash ^= Score.GetHashCode();
        if (HasRedCards) hash ^= RedCards.GetHashCode();
        hash ^= yellowCardTimes_.GetHashCode();
        if (HasYellowCards) hash ^= YellowCards.GetHashCode();
        if (HasTimeouts) hash ^= Timeouts.GetHashCode();
        if (HasTimeoutTime) hash ^= TimeoutTime.GetHashCode();
        if (HasGoalkeeper) hash ^= Goalkeeper.GetHashCode();
        if (HasFoulCounter) hash ^= FoulCounter.GetHashCode();
        if (HasBallPlacementFailures) hash ^= BallPlacementFailures.GetHashCode();
        if (HasCanPlaceBall) hash ^= CanPlaceBall.GetHashCode();
        if (HasMaxAllowedBots) hash ^= MaxAllowedBots.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasName) {
          output.WriteRawTag(10);
          output.WriteString(Name);
        }
        if (HasScore) {
          output.WriteRawTag(16);
          output.WriteUInt32(Score);
        }
        if (HasRedCards) {
          output.WriteRawTag(24);
          output.WriteUInt32(RedCards);
        }
        yellowCardTimes_.WriteTo(output, _repeated_yellowCardTimes_codec);
        if (HasYellowCards) {
          output.WriteRawTag(40);
          output.WriteUInt32(YellowCards);
        }
        if (HasTimeouts) {
          output.WriteRawTag(48);
          output.WriteUInt32(Timeouts);
        }
        if (HasTimeoutTime) {
          output.WriteRawTag(56);
          output.WriteUInt32(TimeoutTime);
        }
        if (HasGoalkeeper) {
          output.WriteRawTag(64);
          output.WriteUInt32(Goalkeeper);
        }
        if (HasFoulCounter) {
          output.WriteRawTag(72);
          output.WriteUInt32(FoulCounter);
        }
        if (HasBallPlacementFailures) {
          output.WriteRawTag(80);
          output.WriteUInt32(BallPlacementFailures);
        }
        if (HasCanPlaceBall) {
          output.WriteRawTag(96);
          output.WriteBool(CanPlaceBall);
        }
        if (HasMaxAllowedBots) {
          output.WriteRawTag(104);
          output.WriteUInt32(MaxAllowedBots);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasName) {
          output.WriteRawTag(10);
          output.WriteString(Name);
        }
        if (HasScore) {
          output.WriteRawTag(16);
          output.WriteUInt32(Score);
        }
        if (HasRedCards) {
          output.WriteRawTag(24);
          output.WriteUInt32(RedCards);
        }
        yellowCardTimes_.WriteTo(ref output, _repeated_yellowCardTimes_codec);
        if (HasYellowCards) {
          output.WriteRawTag(40);
          output.WriteUInt32(YellowCards);
        }
        if (HasTimeouts) {
          output.WriteRawTag(48);
          output.WriteUInt32(Timeouts);
        }
        if (HasTimeoutTime) {
          output.WriteRawTag(56);
          output.WriteUInt32(TimeoutTime);
        }
        if (HasGoalkeeper) {
          output.WriteRawTag(64);
          output.WriteUInt32(Goalkeeper);
        }
        if (HasFoulCounter) {
          output.WriteRawTag(72);
          output.WriteUInt32(FoulCounter);
        }
        if (HasBallPlacementFailures) {
          output.WriteRawTag(80);
          output.WriteUInt32(BallPlacementFailures);
        }
        if (HasCanPlaceBall) {
          output.WriteRawTag(96);
          output.WriteBool(CanPlaceBall);
        }
        if (HasMaxAllowedBots) {
          output.WriteRawTag(104);
          output.WriteUInt32(MaxAllowedBots);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasName) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
        }
        if (HasScore) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Score);
        }
        if (HasRedCards) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RedCards);
        }
        size += yellowCardTimes_.CalculateSize(_repeated_yellowCardTimes_codec);
        if (HasYellowCards) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(YellowCards);
        }
        if (HasTimeouts) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timeouts);
        }
        if (HasTimeoutTime) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutTime);
        }
        if (HasGoalkeeper) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Goalkeeper);
        }
        if (HasFoulCounter) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FoulCounter);
        }
        if (HasBallPlacementFailures) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BallPlacementFailures);
        }
        if (HasCanPlaceBall) {
          size += 1 + 1;
        }
        if (HasMaxAllowedBots) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxAllowedBots);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(TeamInfo other) {
        if (other == null) {
          return;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasScore) {
          Score = other.Score;
        }
        if (other.HasRedCards) {
          RedCards = other.RedCards;
        }
        yellowCardTimes_.Add(other.yellowCardTimes_);
        if (other.HasYellowCards) {
          YellowCards = other.YellowCards;
        }
        if (other.HasTimeouts) {
          Timeouts = other.Timeouts;
        }
        if (other.HasTimeoutTime) {
          TimeoutTime = other.TimeoutTime;
        }
        if (other.HasGoalkeeper) {
          Goalkeeper = other.Goalkeeper;
        }
        if (other.HasFoulCounter) {
          FoulCounter = other.FoulCounter;
        }
        if (other.HasBallPlacementFailures) {
          BallPlacementFailures = other.BallPlacementFailures;
        }
        if (other.HasCanPlaceBall) {
          CanPlaceBall = other.CanPlaceBall;
        }
        if (other.HasMaxAllowedBots) {
          MaxAllowedBots = other.MaxAllowedBots;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              Name = input.ReadString();
              break;
            }
            case 16: {
              Score = input.ReadUInt32();
              break;
            }
            case 24: {
              RedCards = input.ReadUInt32();
              break;
            }
            case 34:
            case 32: {
              yellowCardTimes_.AddEntriesFrom(input, _repeated_yellowCardTimes_codec);
              break;
            }
            case 40: {
              YellowCards = input.ReadUInt32();
              break;
            }
            case 48: {
              Timeouts = input.ReadUInt32();
              break;
            }
            case 56: {
              TimeoutTime = input.ReadUInt32();
              break;
            }
            case 64: {
              Goalkeeper = input.ReadUInt32();
              break;
            }
            case 72: {
              FoulCounter = input.ReadUInt32();
              break;
            }
            case 80: {
              BallPlacementFailures = input.ReadUInt32();
              break;
            }
            case 96: {
              CanPlaceBall = input.ReadBool();
              break;
            }
            case 104: {
              MaxAllowedBots = input.ReadUInt32();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 10: {
              Name = input.ReadString();
              break;
            }
            case 16: {
              Score = input.ReadUInt32();
              break;
            }
            case 24: {
              RedCards = input.ReadUInt32();
              break;
            }
            case 34:
            case 32: {
              yellowCardTimes_.AddEntriesFrom(ref input, _repeated_yellowCardTimes_codec);
              break;
            }
            case 40: {
              YellowCards = input.ReadUInt32();
              break;
            }
            case 48: {
              Timeouts = input.ReadUInt32();
              break;
            }
            case 56: {
              TimeoutTime = input.ReadUInt32();
              break;
            }
            case 64: {
              Goalkeeper = input.ReadUInt32();
              break;
            }
            case 72: {
              FoulCounter = input.ReadUInt32();
              break;
            }
            case 80: {
              BallPlacementFailures = input.ReadUInt32();
              break;
            }
            case 96: {
              CanPlaceBall = input.ReadBool();
              break;
            }
            case 104: {
              MaxAllowedBots = input.ReadUInt32();
              break;
            }
          }
        }
      }
      #endif

    }

    /// <summary>
    /// The coordinates of the Designated Position. These are measured in
    /// millimetres and correspond to SSL-Vision coordinates. These fields are
    /// always either both present (in the case of a ball placement command) or
    /// both absent (in the case of any other command).
    /// </summary>
    public sealed partial class Point : pb::IMessage<Point>
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
    #endif
    {
      private static readonly pb::MessageParser<Point> _parser = new pb::MessageParser<Point>(() => new Point());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pb::MessageParser<Point> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::Referee.Descriptor.NestedTypes[1]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Point() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Point(Point other) : this() {
        _hasBits0 = other._hasBits0;
        x_ = other.x_;
        y_ = other.y_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public Point Clone() {
        return new Point(this);
      }

      /// <summary>Field number for the "x" field.</summary>
      public const int XFieldNumber = 1;
      private readonly static float XDefaultValue = 0F;

      private float x_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public float X {
        get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
        set {
          _hasBits0 |= 1;
          x_ = value;
        }
      }
      /// <summary>Gets whether the "x" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasX {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "x" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearX() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "y" field.</summary>
      public const int YFieldNumber = 2;
      private readonly static float YDefaultValue = 0F;

      private float y_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public float Y {
        get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
        set {
          _hasBits0 |= 2;
          y_ = value;
        }
      }
      /// <summary>Gets whether the "y" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool HasY {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "y" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void ClearY() {
        _hasBits0 &= ~2;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override bool Equals(object other) {
        return Equals(other as Point);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public bool Equals(Point other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
        if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override int GetHashCode() {
        int hash = 1;
        if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
        if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void WriteTo(pb::CodedOutputStream output) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
      #else
        if (HasX) {
          output.WriteRawTag(13);
          output.WriteFloat(X);
        }
        if (HasY) {
          output.WriteRawTag(21);
          output.WriteFloat(Y);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
        if (HasX) {
          output.WriteRawTag(13);
          output.WriteFloat(X);
        }
        if (HasY) {
          output.WriteRawTag(21);
          output.WriteFloat(Y);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(ref output);
        }
      }
      #endif

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public int CalculateSize() {
        int size = 0;
        if (HasX) {
          size += 1 + 4;
        }
        if (HasY) {
          size += 1 + 4;
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(Point other) {
        if (other == null) {
          return;
        }
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      public void MergeFrom(pb::CodedInputStream input) {
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
      #else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 13: {
              X = input.ReadFloat();
              break;
            }
            case 21: {
              Y = input.ReadFloat();
              break;
            }
          }
        }
      #endif
      }

      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
      void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
              break;
            case 13: {
              X = input.ReadFloat();
              break;
            }
            case 21: {
              Y = input.ReadFloat();
              break;
            }
          }
        }
      }
      #endif

    }

  }
  #endregion

}

public sealed partial class ProposedGameEvent : pb::IMessage<ProposedGameEvent>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<ProposedGameEvent> _parser = new pb::MessageParser<ProposedGameEvent>(() => new ProposedGameEvent());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<ProposedGameEvent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::SslRefereeReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProposedGameEvent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProposedGameEvent(ProposedGameEvent other) : this() {
    _hasBits0 = other._hasBits0;
    validUntil_ = other.validUntil_;
    proposerId_ = other.proposerId_;
    gameEvent_ = other.gameEvent_ != null ? other.gameEvent_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ProposedGameEvent Clone() {
    return new ProposedGameEvent(this);
  }

  /// <summary>Field number for the "valid_until" field.</summary>
  public const int ValidUntilFieldNumber = 1;
  private readonly static ulong ValidUntilDefaultValue = 0UL;

  private ulong validUntil_;
  /// <summary>
  /// The UNIX timestamp when the game event proposal will time out, in microseconds.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public ulong ValidUntil {
    get { if ((_hasBits0 & 1) != 0) { return validUntil_; } else { return ValidUntilDefaultValue; } }
    set {
      _hasBits0 |= 1;
      validUntil_ = value;
    }
  }
  /// <summary>Gets whether the "valid_until" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasValidUntil {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "valid_until" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearValidUntil() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "proposer_id" field.</summary>
  public const int ProposerIdFieldNumber = 2;
  private readonly static string ProposerIdDefaultValue = "";

  private string proposerId_;
  /// <summary>
  /// The identifier of the proposer.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ProposerId {
    get { return proposerId_ ?? ProposerIdDefaultValue; }
    set {
      proposerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "proposer_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasProposerId {
    get { return proposerId_ != null; }
  }
  /// <summary>Clears the value of the "proposer_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearProposerId() {
    proposerId_ = null;
  }

  /// <summary>Field number for the "game_event" field.</summary>
  public const int GameEventFieldNumber = 3;
  private global::GameEvent gameEvent_;
  /// <summary>
  /// The proposed game event.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public global::GameEvent GameEvent {
    get { return gameEvent_; }
    set {
      gameEvent_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as ProposedGameEvent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(ProposedGameEvent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ValidUntil != other.ValidUntil) return false;
    if (ProposerId != other.ProposerId) return false;
    if (!object.Equals(GameEvent, other.GameEvent)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (HasValidUntil) hash ^= ValidUntil.GetHashCode();
    if (HasProposerId) hash ^= ProposerId.GetHashCode();
    if (gameEvent_ != null) hash ^= GameEvent.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (HasValidUntil) {
      output.WriteRawTag(8);
      output.WriteUInt64(ValidUntil);
    }
    if (HasProposerId) {
      output.WriteRawTag(18);
      output.WriteString(ProposerId);
    }
    if (gameEvent_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(GameEvent);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (HasValidUntil) {
      output.WriteRawTag(8);
      output.WriteUInt64(ValidUntil);
    }
    if (HasProposerId) {
      output.WriteRawTag(18);
      output.WriteString(ProposerId);
    }
    if (gameEvent_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(GameEvent);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (HasValidUntil) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ValidUntil);
    }
    if (HasProposerId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ProposerId);
    }
    if (gameEvent_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameEvent);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(ProposedGameEvent other) {
    if (other == null) {
      return;
    }
    if (other.HasValidUntil) {
      ValidUntil = other.ValidUntil;
    }
    if (other.HasProposerId) {
      ProposerId = other.ProposerId;
    }
    if (other.gameEvent_ != null) {
      if (gameEvent_ == null) {
        GameEvent = new global::GameEvent();
      }
      GameEvent.MergeFrom(other.GameEvent);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ValidUntil = input.ReadUInt64();
          break;
        }
        case 18: {
          ProposerId = input.ReadString();
          break;
        }
        case 26: {
          if (gameEvent_ == null) {
            GameEvent = new global::GameEvent();
          }
          input.ReadMessage(GameEvent);
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 8: {
          ValidUntil = input.ReadUInt64();
          break;
        }
        case 18: {
          ProposerId = input.ReadString();
          break;
        }
        case 26: {
          if (gameEvent_ == null) {
            GameEvent = new global::GameEvent();
          }
          input.ReadMessage(GameEvent);
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
